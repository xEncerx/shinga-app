name: üêõ Debug CI Build

on:
  push:
    branches: [debug-ci]

env:
  FLUTTER_VERSION: '3.35.6'
  JAVA_VERSION: '17'

jobs:
  debug-build:
    name: üîç Debug Android Build
    runs-on: windows-latest
    timeout-minutes: 60
    
    env:
      SHOREBIRD_TOKEN: ${{ secrets.SHOREBIRD_TOKEN }}
    
    steps:
      # ========================================
      # üì• Checkout
      # ========================================
      - name: üì• Checkout
        uses: actions/checkout@v4

      # ========================================
      # üîß Git Long Paths
      # ========================================
      - name: üîß Enable Git Long Paths
        run: |
          git config --system core.longpaths true
          Write-Host "‚úÖ Git long paths enabled" -ForegroundColor Green
        shell: pwsh

      # ========================================
      # ‚òï Java Setup
      # ========================================
      - name: ‚òï Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}

      # ========================================
      # üê¶ Flutter Setup
      # ========================================
      - name: üê¶ Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'

      # ========================================
      # üîß Configure PUB_CACHE
      # ========================================
      - name: üîß Configure PUB_CACHE
        run: |
          $pubCachePath = "D:\.pub-cache"
          New-Item -ItemType Directory -Force -Path $pubCachePath | Out-Null
          echo "PUB_CACHE=$pubCachePath" >> $env:GITHUB_ENV
          Write-Host "‚úÖ PUB_CACHE set to $pubCachePath" -ForegroundColor Green
        shell: pwsh

      # ========================================
      # üèñÔ∏è Shorebird Setup
      # ========================================
      - name: üèñÔ∏è Setup Shorebird
        uses: shorebirdtech/setup-shorebird@v1

      - name: üîê Verify Shorebird
        run: |
          Write-Host "üîç Checking Shorebird..." -ForegroundColor Cyan
          shorebird doctor
          
          if (-not (Test-Path "shorebird.yaml")) {
            Write-Host "‚ùå shorebird.yaml not found!" -ForegroundColor Red
            exit 1
          }
          Write-Host "‚úÖ Shorebird ready" -ForegroundColor Green
        shell: pwsh

      # ========================================
      # üì¶ Dependencies
      # ========================================
      - name: üì¶ Get dependencies
        run: |
          Write-Host "üì¶ Getting Flutter dependencies..." -ForegroundColor Cyan
          flutter pub get
          Write-Host "‚úÖ Dependencies loaded" -ForegroundColor Green
        shell: pwsh

      # ========================================
      # üîß Code Generation
      # ========================================
      - name: üîß Generate code
        run: |
          Write-Host "üîß Running slang..." -ForegroundColor Cyan
          dart run slang
          
          Write-Host "üîß Running build_runner..." -ForegroundColor Cyan
          dart run build_runner build --delete-conflicting-outputs
          
          Write-Host "‚úÖ Code generation completed" -ForegroundColor Green
        shell: pwsh

      # ========================================
      # üîë KEYSTORE SETUP WITH DETAILED LOGGING
      # ========================================
      - name: üîë Decode keystore
        run: |
          Write-Host "=" * 60 -ForegroundColor Yellow
          Write-Host "üîë KEYSTORE DECODING" -ForegroundColor Yellow
          Write-Host "=" * 60 -ForegroundColor Yellow
          
          # Check secret
          $keystoreBase64 = "${{ secrets.KEYSTORE_BASE64 }}"
          if ([string]::IsNullOrEmpty($keystoreBase64)) {
            Write-Host "‚ùå KEYSTORE_BASE64 is empty!" -ForegroundColor Red
            exit 1
          }
          Write-Host "‚úÖ KEYSTORE_BASE64 secret exists (length: $($keystoreBase64.Length))" -ForegroundColor Green
          
          # Decode
          try {
            $keystoreBytes = [System.Convert]::FromBase64String($keystoreBase64)
            Write-Host "‚úÖ Base64 decoded successfully ($($keystoreBytes.Length) bytes)" -ForegroundColor Green
          } catch {
            Write-Host "‚ùå Failed to decode base64: $_" -ForegroundColor Red
            exit 1
          }
          
          # Save file
          $keystorePath = "${{ github.workspace }}\android\app\keystore.jks"
          Write-Host "üìç Saving to: $keystorePath" -ForegroundColor Cyan
          
          try {
            [System.IO.File]::WriteAllBytes($keystorePath, $keystoreBytes)
            Write-Host "‚úÖ File saved" -ForegroundColor Green
          } catch {
            Write-Host "‚ùå Failed to save file: $_" -ForegroundColor Red
            exit 1
          }
          
          # Verify
          if (Test-Path $keystorePath) {
            $fileInfo = Get-Item $keystorePath
            Write-Host "‚úÖ Keystore verified:" -ForegroundColor Green
            Write-Host "   Path: $($fileInfo.FullName)" -ForegroundColor Gray
            Write-Host "   Size: $($fileInfo.Length) bytes" -ForegroundColor Gray
            Write-Host "   Created: $($fileInfo.CreationTime)" -ForegroundColor Gray
          } else {
            Write-Host "‚ùå Keystore file not found after saving!" -ForegroundColor Red
            exit 1
          }
        shell: pwsh

      - name: üìù Create key.properties
        run: |
          Write-Host "=" * 60 -ForegroundColor Yellow
          Write-Host "üìù KEY.PROPERTIES CREATION" -ForegroundColor Yellow
          Write-Host "=" * 60 -ForegroundColor Yellow
          
          # Get keystore path and convert to forward slashes
          $keystorePath = "${{ github.workspace }}\android\app\keystore.jks"
          $keystorePathForProps = $keystorePath -replace '\\', '/'
          
          Write-Host "üìç Keystore path for properties: $keystorePathForProps" -ForegroundColor Cyan
          
          # Verify keystore exists
          if (-not (Test-Path $keystorePath)) {
            Write-Host "‚ùå Keystore not found at $keystorePath" -ForegroundColor Red
            exit 1
          }
          Write-Host "‚úÖ Keystore exists" -ForegroundColor Green
          
          # Create key.properties in android/ folder
          $keyPropertiesPath = "${{ github.workspace }}\android\key.properties"
          Write-Host "üìç Creating key.properties at: $keyPropertiesPath" -ForegroundColor Cyan
          
          # Build content
          $content = @"
          storePassword=${{ secrets.KEYSTORE_PASSWORD }}
          keyPassword=${{ secrets.KEY_PASSWORD }}
          keyAlias=${{ secrets.KEY_ALIAS }}
          storeFile=$keystorePathForProps
          "@
          
          try {
            Set-Content -Path $keyPropertiesPath -Value $content -NoNewline
            Write-Host "‚úÖ key.properties created" -ForegroundColor Green
          } catch {
            Write-Host "‚ùå Failed to create key.properties: $_" -ForegroundColor Red
            exit 1
          }
          
          # Verify and display (without passwords)
          if (Test-Path $keyPropertiesPath) {
            Write-Host "‚úÖ key.properties verified" -ForegroundColor Green
            Write-Host "üìÑ Content (passwords hidden):" -ForegroundColor Cyan
            Get-Content $keyPropertiesPath | ForEach-Object {
              if ($_ -match 'Password') {
                Write-Host "   $(($_ -split '=')[0])=***" -ForegroundColor Gray
              } else {
                Write-Host "   $_" -ForegroundColor Gray
              }
            }
          } else {
            Write-Host "‚ùå key.properties not found after creation!" -ForegroundColor Red
            exit 1
          }
        shell: pwsh

      - name: üîç Final verification
        run: |
          Write-Host "=" * 60 -ForegroundColor Yellow
          Write-Host "üîç FINAL VERIFICATION" -ForegroundColor Yellow
          Write-Host "=" * 60 -ForegroundColor Yellow
          
          $errors = @()
          
          # Check keystore
          $keystorePath = "${{ github.workspace }}\android\app\keystore.jks"
          if (Test-Path $keystorePath) {
            $size = (Get-Item $keystorePath).Length
            Write-Host "‚úÖ Keystore: $keystorePath ($size bytes)" -ForegroundColor Green
          } else {
            $errors += "Keystore not found"
            Write-Host "‚ùå Keystore not found" -ForegroundColor Red
          }
          
          # Check key.properties
          $keyPropsPath = "${{ github.workspace }}\android\key.properties"
          if (Test-Path $keyPropsPath) {
            $lines = Get-Content $keyPropsPath
            Write-Host "‚úÖ key.properties: $keyPropsPath ($($lines.Count) lines)" -ForegroundColor Green
            
            # Verify all required fields
            $hasStore = ($lines | Where-Object { $_ -match '^storePassword=' }).Count -gt 0
            $hasKey = ($lines | Where-Object { $_ -match '^keyPassword=' }).Count -gt 0
            $hasAlias = ($lines | Where-Object { $_ -match '^keyAlias=' }).Count -gt 0
            $hasFile = ($lines | Where-Object { $_ -match '^storeFile=' }).Count -gt 0
            
            Write-Host "   storePassword: $(if($hasStore){'‚úÖ'}else{'‚ùå'})" -ForegroundColor $(if($hasStore){'Green'}else{'Red'})
            Write-Host "   keyPassword: $(if($hasKey){'‚úÖ'}else{'‚ùå'})" -ForegroundColor $(if($hasKey){'Green'}else{'Red'})
            Write-Host "   keyAlias: $(if($hasAlias){'‚úÖ'}else{'‚ùå'})" -ForegroundColor $(if($hasAlias){'Green'}else{'Red'})
            Write-Host "   storeFile: $(if($hasFile){'‚úÖ'}else{'‚ùå'})" -ForegroundColor $(if($hasFile){'Green'}else{'Red'})
            
            if (-not ($hasStore -and $hasKey -and $hasAlias -and $hasFile)) {
              $errors += "key.properties missing required fields"
            }
          } else {
            $errors += "key.properties not found"
            Write-Host "‚ùå key.properties not found" -ForegroundColor Red
          }
          
          # Check build.gradle
          $buildGradle = "${{ github.workspace }}\android\app\build.gradle"
          if (Test-Path $buildGradle) {
            Write-Host "‚úÖ build.gradle exists" -ForegroundColor Green
            $content = Get-Content $buildGradle -Raw
            if ($content -match "signingConfigs") {
              Write-Host "‚úÖ Has signingConfigs section" -ForegroundColor Green
            } else {
              Write-Host "‚ö†Ô∏è No signingConfigs found in build.gradle" -ForegroundColor Yellow
            }
          }
          
          if ($errors.Count -gt 0) {
            Write-Host "" -ForegroundColor Red
            Write-Host "‚ùå ERRORS FOUND:" -ForegroundColor Red
            $errors | ForEach-Object { Write-Host "   - $_" -ForegroundColor Red }
            exit 1
          }
          
          Write-Host "" -ForegroundColor Green
          Write-Host "üéØ ALL CHECKS PASSED!" -ForegroundColor Green
        shell: pwsh

      # ========================================
      # ü§ñ BUILD
      # ========================================
      - name: ü§ñ Build with Shorebird
        run: |
          Write-Host "=" * 60 -ForegroundColor Yellow
          Write-Host "ü§ñ STARTING SHOREBIRD BUILD" -ForegroundColor Yellow
          Write-Host "=" * 60 -ForegroundColor Yellow
          
          shorebird release android `
            --flutter-version=${{ env.FLUTTER_VERSION }} `
            --artifact apk `
            --verbose `
            -- `
            --dart-define=API_BASE_URL=${{ secrets.API_BASE_URL }} `
            --dart-define=GOOGLE_CLIENT_ANDROID_ID=${{ secrets.GOOGLE_CLIENT_ANDROID_ID }} `
            --dart-define=GOOGLE_CLIENT_WINDOWS_SECRET=${{ secrets.GOOGLE_CLIENT_WINDOWS_SECRET }} `
            --dart-define=GOOGLE_CLIENT_WINDOWS_ID=${{ secrets.GOOGLE_CLIENT_WINDOWS_ID }} `
            --dart-define=YANDEX_CLIENT_ID=${{ secrets.YANDEX_CLIENT_ID }}
        shell: pwsh

      # ========================================
      # üìß Notifications
      # ========================================
      - name: ‚ùå Build failed
        if: failure()
        run: |
          Write-Host "=" * 60 -ForegroundColor Red
          Write-Host "‚ùå BUILD FAILED - CHECK LOGS ABOVE" -ForegroundColor Red
          Write-Host "=" * 60 -ForegroundColor Red
        shell: pwsh

      - name: ‚úÖ Build success
        if: success()
        run: |
          Write-Host "=" * 60 -ForegroundColor Green
          Write-Host "‚úÖ BUILD COMPLETED SUCCESSFULLY!" -ForegroundColor Green
          Write-Host "=" * 60 -ForegroundColor Green
        shell: pwsh
